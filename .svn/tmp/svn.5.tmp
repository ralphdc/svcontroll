<?php
/**
 * 日志服务和java通信公共数据接口类子类（实时监控总数）
 * @author zengguangqiu
 *
 */
class DownloadModel extends CommunicationModel {
	var $method = array(
			'index'=>'xgd.log.monitor.rtmonitor',
			'showDetail'=>'xgd.log.monitor.rtdetail',
	);
	
	/**
	 * 根据POST过来的数据提取查询条件查询记录条数
	 * @param array $post
	 * @return int
	 */
	function countByPost ($post, $get) {
		if(empty($this->count)){
		   $this->count = 0;
		}
		return $this->count;	
	}
	
	/**
	 * 根据POST过来的数据提取查询条件查询记录
	 * @param array $post
	 * @return array
	 */
	function findByPost ($post, $get) {
		if(!Empty($post)){
			foreach ($post as $key=>$valus){
				$post[$key]=trim($valus," ");
			}
		}
		$Num = $post['pageNum']!='' ? $post['pageNum'] : 1;
		if ($post['numPerPage']!='') {
			setcookie('numPerPage',$post['numPerPage']);
			$numPer = $post['numPerPage'];
		}
		else {
			$numPer = $_COOKIE['numPerPage']!=0 ?$_COOKIE['numPerPage'] : 20;
		}
		$limit1 = (intval($Num)-1)*intval($numPer);
		$limit = array(intval($numPer),$limit1);
		$post['method']=$this->method['index'];
		$post['pageIndex']=intval($Num);
		$post['pageSize']=intval($numPer);
		$post = $this->formatPost($post,$get);
		//dump($post);
		$array = $this->request_by_other($post,$get);
		$array = json_decode($array,true);
		$result = $array['rtndata'];
		$this->count = $result['count'];
		return $result['respList'];
	}
	/**
	 * ICE下载开始和停止的接口
	 * @param unknown $post
	 * @param unknown $get
	 */
	function startorstopdown($post,$get)
	{
		if(!Empty($post)){
			foreach ($post as $key=>$valus){
				$post[$key]=trim($valus," ");
			}
		}
		//$url = "http://172.20.0.89:51007";
		//$url = "http://172.20.0.98:51007";
		$url = C('ICEDOWN_START_STOP');
		$post1['data']['messageType'] = "controlAidCapk";
		$post1['data']['message']['command'] = $post['iscloseStr'];
		//$post = $this->formatPost($post,$get);
		$result = $this->request_by_otherUrl($url,$post1);
		return $result;
	}
	
	function webscoketRequest($post,$get)
	{
		$soap_url =C("ICEDOWN_LIST_URL");
		$soap = new SoapClient($soap_url);
		$soap->soap_defencoding = 'utf-8';
		$soap->xml_encoding = 'utf-8';
		$option = array('startTime'=>$post['start'],'endTime'=>$post['end']);
		$fucname = 'queryCapkUpgradeByTime';
		try{
			$ret = $soap->queryCapkUpgradeByTime($option);
			$response = $this->obj2array($ret);
			return $response;
		}catch(Exception $e){
			return $e->getMessage();
		}
	}
	
	private function obj2array($obj) {
		$out = array();
		foreach ($obj as $key => $val) {
			switch(true) {
				case is_object($val):
					$out[$key] = $this->obj2array($val);
					break;
				case is_array($val):
					$out[$key] = $this->obj2array($val);
					break;
				default:
					$out[$key] = $val;
			}
		}
		return $out;
	}
}