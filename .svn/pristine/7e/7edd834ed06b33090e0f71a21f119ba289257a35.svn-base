<?php
use Think\Cache\Driver\Redis;
class GraphlogicController extends CommonController{
    
    var $navTab = '2c9183e1532c1050015372f8083f0007';
    var $pageSize = "5";
    var $pageNumShown = "5";
    
    
    public function __construct()
    {
        parent::__construct();
        $this->__init();
        
    }
    
    public function __init()
    {
         $this->redis = new \Redis;
         if(!$this->redis->connect(C('REDIS_HOST'),C('REDIS_PORT'))){
             $ret = array("statusCode"=>"0","message"=>'Redis服务无法连接！',"navTabId"=>$this->navTab,
    					"rel"=>"","forwardUrl"=>"","callbackType"=>"closeCurrent");
    			echo json_encode($ret); exit;
        }
        //redis初始化；
        $this->sid = session_id();
        $this->topo_hash = "topo:hash:lg:".$this->sid;
        //预览拓扑图，递归点击子拓扑记录轨迹；20160301
        $this->monitor_list = "topo:list:lg:monitor:".$this->sid;
        
        //保存当前操作类型；
        $this->action_name = "topo:action:".$this->sid;
        //保存当前编辑拓扑图ID;
        $this->edit_id = "topo:edit:id:".$this->sid;
    }
    
    
    public function index()
    {
         if($_GET['pageNum'])
        {
            $_REQUEST['numPerPage'] = empty($_REQUEST['numPerPage']) ?  ($_COOKIE['toponumPerPage']? $_COOKIE['toponumPerPage']:C('PAGE_LISTROWS') ): $_REQUEST['numPerPage'];
            $_REQUEST[C('VAR_PAGE')] = $_GET['pageNum'];
            $_POST['pageNum'] = $_GET['pageNum'];
        }
        $pageNum =empty($_REQUEST['numPerPage']) ?  ($_COOKIE['toponumPerPage']? $_COOKIE['toponumPerPage']:C('PAGE_LISTROWS') ): $_REQUEST['numPerPage'];
        $this->assign ( 'numPerPage', $pageNum ); //每页显示多少条
        $this->assign ( 'currentPage', !empty($_REQUEST[C('VAR_PAGE')])?$_REQUEST[C('VAR_PAGE')]:1);
        $dataModel = new GraphlogicModel();
        $result = $dataModel->findByPost($_POST,$_GET);
        $count = $dataModel->countByPost($_POST,$_GET);
        $this->assign ( 'totalCount', $count );
        $this->assign('list',$result);
        $this->assign('ctl',CONTROLLER_NAME);
        $this->display();
    }
    
    public function getDeviceList()
    {
        //获取设备列表和对应图标；
        $dtypeMode = new DeviceTypeModel();
        $dtypeList = $dtypeMode->query();
        if(count($dtypeList['data'])){
            $dtype= array();
            foreach ($dtypeList['data'] as $type){
                $dtype[$type['deviceid']] = $type['iconurl'];
            }
            //2016-02-25; 增加子拓扑图图标；
            $dtype['childtp'] = 'childtp.png';
            $dtype['default'] = 'default.png';
        }
        return $dtype;
    }
    
    public function getDeviceNameList()
    {
        //获取设备列表和对应图标；
        $dtypeMode = new DeviceTypeModel();
        $dtypeList = $dtypeMode->query();
        if(count($dtypeList['data'])){
            $dName= array();
            foreach ($dtypeList['data'] as $type){
                $dName[$type['deviceid']] = $type['deviceName'];
            }
        }
        return $dName;
    }
    
    public function add()
    {
        
        $this->redis->del($this->topo_hash);
        $dtype = $this->getDeviceList();
        $this->assign('dtype',json_encode($dtype));
        $this->redis->set($this->action_name,'add');
        $this->display();
    }

    public function graphSave()
    {
        
        if($_POST){
            $_POST['data']['creator'] = $_SESSION['cUserNo'];
            
          /*   $nodeInfo = $this->redis->hgetall($this->topo_hash);
            if(empty($nodeInfo)){
                $ret = array("statusCode"=>"0","message"=>'您的拓扑图节点没有设置信息！',"navTabId"=>"",
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
            
            //数据转换；
            foreach ($nodeInfo as $ink=>$inv){
                $nodeInfo[$ink] = json_decode($inv);
            } 
            
            $_POST['data']['data'] = $nodeInfo;
            */
            $_POST['data']['data'] = '--';
            $jtopoModel = new GraphlogicModel();
            
            if($_POST['data']['topoId']){
                $sa = $jtopoModel->edit($_POST);
            }else{
                $sa = $jtopoModel->save($_POST);
            }
            
            
            if(isset($sa['errorCode']) && $sa['errorCode'] == 0){
                $ret = array("statusCode"=>"1","message"=>'提交成功！',"navTabId"=>$this->navTab,
    					"rel"=>"","forwardUrl"=>"","callbackType"=>"closeCurrent");
    			echo json_encode($ret);	return;
            }else{
                $ret = array("statusCode"=>"0","message"=> $sa['errorMessage'],"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
        }
        
        if($_GET['tpname']) $this->assign('tpname',$_GET['tpname']);
        $this->display();
    }
    
    public function edit()
    {
        if($_GET['id']){
            
            $this->redis->del($this->topo_hash);
            $dataModel = new GraphlogicModel();
            $info = $dataModel->findbyid($_GET);
            if(isset($info['errorCode']) && $info['errorCode'] == 0){
               $content = $info['data']['graph'];
               $nodeinfo = json_decode($info['data']['data']);
               $nodeinfos = object2array($nodeinfo);
               foreach ($nodeinfos as $nk=>$nf){
                   $nodeinfos[$nk] = json_encode($nf);
               }
              $this->redis->hmset($this->topo_hash,$nodeinfos);
              $this->assign('topo',$content);
              $this->assign('tpname',$info['data']['topoName']);
              $this->assign('tpid',$info['data']['topoId']);
              
               //图标集合；
                $iconModel = new ProiconModel();
                //获取所有产品名称；20160303；
                $allNode = $iconModel->findByPost();
                $iconType = array();
                if(count($allNode) > 0){
                    foreach ($allNode as $n){
                       // $iconType[$n['pdName']] = $n['pdIcon'];
                        $iconType[$n['pdName']] = file_exists('Public/Images/jtopolg/'.$n['pdIcon']) ? $n['pdIcon'] : 'default.png';
                        
                    }
                }
             // $this->assign('dtype',json_encode($iconType));
              $this->redis->set($this->action_name,'edit');
              $this->redis->set($this->edit_id,strval($_GET['id']));
              $this->display();
              
            }else{
                $ret = array("statusCode"=>"0","message"=>'读取数据有误，请稍后再试！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
            
        }
     
    }
    
    public function preview()
    {
        if($_GET['id']){
    
            $this->redis->del($this->topo_hash);
    
            $dataModel = new GraphlogicModel();
            $info = $dataModel->findbyid($_GET);
            if(isset($info['errorCode']) && $info['errorCode'] == 0){
                $content = $info['data']['graph'];
    
                $nodeinfo = json_decode($info['data']['data']);
                 
                $nodeinfos = object2array($nodeinfo);
                 
                foreach ($nodeinfos as $nk=>$nf){
                    $nodeinfos[$nk] = json_encode($nf);
                }
                $this->redis->hmset($this->topo_hash,$nodeinfos);
    
    
                $this->assign('topo',$content);
                $this->assign('tpid',$_GET['id']);
    
    
                $this->display();
    
            }else{
                $ret = array("statusCode"=>"0","message"=>'读取数据有误，请稍后再试！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
    
        }
         
    }
    
    //在线监控；
    public function monitor()
    {
        if($_GET['id']){
            $this->redis->del($this->topo_hash);
            $dataModel = new GraphlogicModel();
            $info = $dataModel->findbyid($_GET);
            if(isset($info['errorCode']) && $info['errorCode'] == 0){
                $content = $info['data']['graph'];
                $nodeinfo = json_decode($info['data']['data']);
                $nodeinfos = object2array($nodeinfo);
                foreach ($nodeinfos as $nk=>$nf){
                    $nodeinfos[$nk] = json_encode($nf);
                }
                $this->redis->hmset($this->topo_hash,$nodeinfos);
                $this->assign('topo',$content);
                $this->assign('tpid',$_GET['id']);
    
               /*  //图标集合；
                $dataModel = new ProiconModel();
                //获取所有产品名称；20160303；
                $allNode = $dataModel->findByPost();
                $iconType = array();
                if(count($allNode) > 0){
                    foreach ($allNode as $n){
                        $iconType[$n['pdName']] = file_exists('Public/Images/jtopolg/'.$n['pdIcon']) ? $n['pdIcon'] : 'default.png';
                    }
                }
                
                $this->assign('dtype',json_encode($iconType)); */
                
                //2016-02-25 添加子拓扑名称；
                //$dtypes['childtp'] = "子拓扑图";
                
                //以下记录拓扑图访问轨迹，例如：从父拓扑图点击进入子拓扑图，再点击...
                //右进左出；
                //2016-03-01
                if(I('get.start',0,'intval') == 1){
                    //清空队列，保存点击轨迹；
                    $this->redis->del($this->monitor_list);
                   
                    $this->redis->rpush($this->monitor_list,json_encode(array($_GET['id'],$info['data']['topoName'],1)));
                }else{
                    //在原有队列基础上整理数据；
                    if(intval($this->redis->llen($this->monitor_list)) > 0){
                        $monitorList = $this->redis->lrange($this->monitor_list,0,-1);
                        $tmpid = array();
                        $tmp = "";
                        foreach ($monitorList as $m){
                            $tmp = json_decode($m,true);
                            $tmpid[] = $tmp[0];
                        }
                        
                        if(in_array($_GET['id'],$tmpid)){
                            $c_key = array_search($_GET['id'],$tmpid);
                            $this->redis->ltrim($this->monitor_list,0,$c_key);
                        }else{
                            $this->redis->rpush($this->monitor_list,json_encode(array($_GET['id'],$info['data']['topoName'])));
                        }
                        unset($tmp);
                        unset($tmpid);
                    }
                }
                
                $btrace =  $this->redis->lrange($this->monitor_list,0,-1);
                foreach ($btrace as $bk=>$bv){
                    $btrace[$bk] = json_decode($bv,true);
                }
               
                $this->assign('trace',$btrace);
                $this->display();
            }else{
                $ret = array("statusCode"=>"0","message"=>'读取数据有误，请稍后再试！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret); return;
            }
        }
    }     
    
    public function graphDel()
    {
        if($_GET['id']){
            $dataModel = new GraphlogicModel();
            $del = $dataModel->delete($_GET);
            if(isset($del['errorCode']) && $del['errorCode'] == 0){
                $ret = array("statusCode"=>"1","message"=>'删除成功！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }else{
                $ret = array("statusCode"=>"0","message"=> $del['errorMessage'],"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
        }
    }
    
    public function graphBatchDel()
    {
        if($_POST['ids']){
            $dataModel = new GraphlogicModel();
            $del = $dataModel->batchdelete($_POST);
            if(isset($del['errorCode']) && $del['errorCode'] == 0){
                $ret = array("statusCode"=>"1","message"=>'删除成功！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }else{
                $ret = array("statusCode"=>"0","message"=> $del['errorMessage'],"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
        }else{
            $ret = array("statusCode"=>"0","message"=> '提交数据有误！',"navTabId"=>$this->navTab,
                "rel"=>"","forwardUrl"=>"","callbackType"=>"");
            echo json_encode($ret);	return;
        }
    }
    
    //编辑子节点；
    public function editNode()
    {
        $dataModel = new ProiconModel();
        //一次性获取所有产品；
        $proListModel = new ProiconModel();
        $proList = $proListModel->queryProList();
        if(isset($proList['errorCode']) && $proList['errorCode'] ===0){
            $this->assign('prolist',$proList['data']);
        }
        
        //获取所有服务；
        $allService = $dataModel->queryServiceList();
        if(isset($allService['errorCode']) && $allService['errorCode'] == 0){
           $service = array();
           foreach ($allService['data'] as $s){
               $service[$s['serviceName'].'@'.$s['serviceFunction'].'@'.$s['aliasProduct']] = $s['serviceName'].'('.$s['serviceFunction'].')';
               //$service[$s['serviceName']] = $s['serviceName'].'('.$s['serviceFunction'].')';
           }
           $this->assign('service',$service);
        }
        $this->display();
    }
    
    /**
     * 编辑节点-查询产品；20160303；
     */
    public function proSearch()
    {
        $pdName = I('post.pdName','');
        if($pdName){
            $proModel = new ProiconModel();
            $proInfo = $proModel->findByPost(array('data'=>array('pdName'=>$pdName)));
            if(is_array($proInfo[0]) && count($proInfo[0]) > 0){
                $ret = array("statusCode"=>"1","message"=>'查询成功！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode(array_merge($ret,$proInfo[0]));	return;
            }else{
                $ret = array("statusCode"=>"0","message"=> "查询失败！","navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
            
        }
    }
    
    /**
     * 编辑节点-查询服务；20160303；
     */
    public function serviceSearch()
    {
        $sName = I('post.sName','');
        if($sName){
            $serModel = new ProiconModel();
            $serviceInfo = $serModel->queryServiceList(array('data'=>array('serviceName'=>$sName)));
            
            
            if(isset($serviceInfo['errorCode']) && $serviceInfo['errorCode'] === 0 && count($serviceInfo['data']) > 0 ){
                $ret = array("statusCode"=>"1","message"=>'查询成功！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode(array_merge($ret,$serviceInfo));	return;
            }else{
                $ret = array("statusCode"=>"0","message"=> "查询失败！","navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
        }
    }
    
    /**
     * 查询产品下面的服务；
     */
    public function queryProService()
    {
        $proName = I('post.pdName');
        if($proName){
            if($proName == '所有产品'){
                $proName = "";
            }
            $model = new ProiconModel();
            $sList = $model->queryServiceList(array('data'=>array('productName'=>$proName)));
            if(isset($sList['errorCode']) && $sList['errorCode'] == 0){
                $ret = array("statusCode"=>"1","message"=>'查询成功！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode(array_merge($ret,$sList));	return;
            }else{
                $ret = array("statusCode"=>"0","message"=> $sList['errorMessage'],"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
        }
        
    }
    //编辑子逻辑图；
    public function editChildTP()
    {
         
        if($_GET['pageNum'])
        {
            $_REQUEST['numPerPage'] = empty($_REQUEST['numPerPage']) ?  ($_COOKIE['toponumPerPage']? $_COOKIE['toponumPerPage']:C('PAGE_LISTROWS') ): $_REQUEST['numPerPage'];
            $_REQUEST[C('VAR_PAGE')] = $_GET['pageNum'];
            $_POST['pageNum'] = $_GET['pageNum'];
        }
        
        $pageNum =empty($_REQUEST['numPerPage']) ?  ($_COOKIE['toponumPerPage']? $_COOKIE['toponumPerPage']:C('PAGE_LISTROWS') ): $_REQUEST['numPerPage'];
        $this->assign ( 'numPerPage', $pageNum ); //每页显示多少条
        $this->assign ( 'currentPage', !empty($_REQUEST[C('VAR_PAGE')])?$_REQUEST[C('VAR_PAGE')]:1);
        
        $dataModel = new GraphlogicModel();
        $result = $dataModel->findByPost($_POST,$_GET);
        $count = $dataModel->countByPost($_POST,$_GET);
        $this->assign ( 'totalCount', $count );
        $this->assign('list',$result);
        
        $this->display('editChildTP');
        
    }
    
    /**
     * 保存编辑后的节点信息；
     */
    public function specailNode()
    {
       if($_POST){
           //服务名@服务描述@所属产品；
           $service = I('post.targetservice','','htmlspecialchars,strval');
           //显示在画布上的节点名称；
           $nodeName= I('post.nodeNameInfo','','htmlspecialchars,strval');
           //产品ID;
           $serviceProIcon = I('post.monitor_pro',0);
           if(empty($service) || empty($nodeName)){
               $ret = array("statusCode"=>"0","message"=> '提交数据不完整，请检查！',"navTabId"=>"",
                   "rel"=>"","forwardUrl"=>"","callbackType"=>"");
               echo json_encode($ret);	return;
           }
           $sInfo = explode("@",$service);
           //检查服务名是否已经存在；
           if($this->redis->hexists($this->topo_hash,$sInfo[0])){
               $ret = array("statusCode"=>"0","message"=> '逻辑图中已存在相同的服务！',"navTabId"=>"",
                   "rel"=>"","forwardUrl"=>"","callbackType"=>"");
               echo json_encode($ret);	return;
           }
           //检查是否存在相同的节点名称；
           $hvals = $this->redis->hvals($this->topo_hash);
           if(is_array($hvals) && count($hvals) > 0){
               foreach ($hvals as $h){
                   $hArr = json_decode($h,true);
                   if($hArr['nodeName'] == $nodeName){
                       $ret = array("statusCode"=>"0","message"=> '逻辑图中已存在相同的节点名称，请修改！',"navTabId"=>"",
                           "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                       echo json_encode($ret);	return;
                   }
               }
           }
           $create = array('serviceName'=>$sInfo[0],'serviceDes'=>$sInfo[1],'servicePro'=>$sInfo[2],'nodeName'=>$nodeName,'proIcon'=>$serviceProIcon,'nodeType'=>'default');
           $node_json = json_encode($create);
           $this->redis->hset($this->topo_hash,$sInfo[0],$node_json);
            //删掉原来的服务名；
            $oldService = I('post.oldServiceName','');
            if($this->redis->hexists($this->topo_hash,$oldService)){
                $this->redis->hdel($this->topo_hash,$oldService);
            }
            
            $ret = array(
                "statusCode"=>"1",
                "message"=> '提交成功！',
                "navTabId"=>"",
                "rel"=>"",
                "forwardUrl"=>"",
                "callbackType"=>"closeCurrent",
                'icon'=>$serviceProIcon,
                'nodeText'=>$nodeName,
                'serviceName'=>$create['serviceName'],
                'proName'=>$create['servicePro']
                );
            echo json_encode($ret);	return;
       }
    }
    
    public function delNodeFromHash()
    {
        $service = I('post.service','');
        if($service){
            if($this->redis->hexists($this->topo_hash,$service)){
                if($r = $this->redis->hdel($this->topo_hash,$service)){
                    $ret = array("statusCode"=>"1","message"=> '拓扑节点删除成功！',"navTabId"=>"",
                        "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                    echo json_encode($ret);	return;
                }else{
                    $ret = array("statusCode"=>"0","message"=> '拓扑节点删除失败！',"navTabId"=>"",
                        "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                    echo json_encode($ret);	return;
                }
            }else{
                //服务名若不存在则是未编辑过的节点；
                $ret = array("statusCode"=>"1","message"=> '拓扑节点删除成功！',"navTabId"=>"",
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret);	return;
            }
        }
    }
    /**
     * 子拓扑图-编辑后提交； 2016-02-25
     */
    public function saveChildTP()
    {
        
        $tpid = I('get.id',0,'intval');
        if($tpid){
            
            //以下是避免选择自身；
            $action = $this->redis->get($this->action_name);
            if(empty($action)){
                $ret = array(
                    "statusCode"=>"0",
                    "message"=> '操作状态保存错误！',
                    "navTabId"=>$this->navTab,
                );
                echo json_encode($ret);	return;
            }
            
            if($action == 'edit'){
                $targetId = $this->redis->get($this->edit_id);
                if(empty($targetId)){
                    $ret = array(
                        "statusCode"=>"0",
                        "message"=> '要编辑的拓扑图ID保存错误！',
                        "navTabId"=>$this->navTab,
                    );
                    echo json_encode($ret);	return;
                }
            
                if($tpid == $targetId){
                    $ret = array(
                        "statusCode"=>"0",
                        "message"=> "不能选择自身作为拓扑节点！",
                        "navTabId"=>$this->navTab,
                    );
                    echo json_encode($ret);	return;
                }
            }
            
            $md = new GraphlogicModel();
            $rts = $md->findbyid(array('id'=>$tpid));
            if(isset($rts['errorCode']) && $rts['errorCode'] === 0){
                $nodeid = 'ctp_'.$rts['data']['topoId'];
                $create = array(
                    'id'=>$rts['data']['topoId'],
                    'tname'=>$rts['data']['topoName'],
                    'nodeType'=>'childtp'
                );
                $node_json = json_encode($create);
                $this->redis->hset($this->topo_hash,$nodeid,$node_json);
                
                $ret = array(
                    "statusCode"=>"1",
                    "message"=>'设置成功！',
                    "proName"=>'childtp',
                    "tpid"=>$rts['data']['topoId'],
                    "tpname"=>$rts['data']['topoName']
                );
            }else{
                $ret = array(
                    "statusCode"=>"0",
                    "message"=> $sa['errorMessage'] ? $sa['errorMessage'] : '接口返回数据数据为空！',
                    "navTabId"=>$this->navTab,
                );
            }
        }else{
            $ret = array(
                "statusCode"=>"0",
                "message"=> '错误！提交数据有误！'
            );
        }
         
            echo json_encode($ret);	return;
    }
    /**
     * 查询设备ID对应的节点信息；
     */
    public function queryDeviceNode()
    {
        if($_POST){
            $post['data']['deviceid'] = $_POST['deviceid'];
        }
        $dataModel = new GraphlogicModel();
        $allNode = $dataModel->findByPost();
        $this->assign('nodes',$allNode);
    }
    
    public function getNodeInfo()
    {
        $node_id = I('post.nodeid');
        $dtype = I('post.dtype','','strval');
        if($node_id){
           
            if($dtype == 'childtp'){
               $node_want_key = 'ctp_'.$node_id;
               $nodeInfo = $this->redis->hget($this->topo_hash,$node_want_key);
            }else{
                $node_want_key =$node_id;
                $sInfo = new ProiconModel();
                
                $rt = $sInfo->queryServiceList(array('data'=>array('serviceName'=>$node_want_key)));
                if(isset($rt['errorCode']) && $rt['errorCode'] === 0 && count($rt['data'][0]) > 0){
                    $nodeInfo  = json_encode(array_merge(array('statusCode'=>1,'message'=>'查询成功！'),$rt['data'][0]));
                }else{
                    $nodeInfo  = json_encode(array('statusCode'=>0,'message'=>'查询失败！'));
                }
            }
            if(!empty($nodeInfo)){
                echo $nodeInfo; return;
            }else{
                echo "Error!"; return;
            }
        }
    }
    
    Public function clearRedis()
    {
        if($keys = $this->redis->keys("*topo*")){
            foreach($keys as $k){
                $this->redis->del($k);
            }
        }
    }

    public function detail()
    {
        $hid = trim($_GET['id']);    //节点ID;
        $tpid =trim($_GET['tpid']);  //拓扑图ID;

        if(empty($hid)){
            $ret =  array('statusCode' =>0,'message'=>'暂时不能查看，请稍后再试！',callbackType=>'' ,'navTabId'=>'' );
            echo json_encode($ret); exit;
        }

        $model = new GraphSearchModel();
        $searchResult = $model->searchById($_GET);


        $this->assign('tpid',$tpid);
        $this->assign('nodeinfo',$searchResult);
        $this->assign('environment',C('CONST_ENVIRONMENT'));
        
        //获取告警信息；
        $nodeInfo = $this->redis->hget($this->topo_hash,$hid);
        $nodeInfoArr = json_decode($nodeInfo,true);

        $requests['ip']=$nodeInfoArr['nodeip'];
        $newmodel = new GraphlogicModel();
        $warnResult = $newmodel->monitor_node_summary($requests);
        $this->assign('warn',$warnResult['data']);
        $this->display('detail');
    }

    public function monitorNodeInfo()
    {
        if($_POST){
            $model = new GraphlogicModel();
            $sResult = $model->monitor_summary(array('services'=>$_POST['service'],'topoIds'=>$_POST['topoIds']));
            if(isset($sResult['errorCode']) && $sResult['errorCode'] == 0){
                $ret = array("statusCode"=>"1","message"=>'获取成功！',"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"","resinfo"=>$sResult['data']);
                echo json_encode($ret); return;
            }else{
                $ret = array("statusCode"=>"0","message"=> $sResult['errorMessage'],"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret); return;
            }
        }
    }

    function Service()
    {
       if($_GET){
            $_GET['ip'] = str_replace("-", ".", $_GET['ip']);
            $model = new GraphlogicModel();
            $sResult = $model->monitor_node_detail($_GET);
            $this->assign('sinfo',$sResult['data']);
            $this->display('service');
       }
    }
    
    /**
     * 设置连线；
     */
    public function getLink()
    {
        $this->display();
    }
    
    public function lgServiceDetail()
    {
        $sName = I('get.sName','');
        if($sName){
            $model = new GraphlogicModel();
            $sResult = $model->lg_monitor_node_detail(array('service'=>$sName));
            if(isset($sResult['errorCode']) && $sResult['errorCode'] == 0){
                $this->assign('sdetail',$sResult['data']);
               $this->display('sdetail');
            }else{
                $ret = array("statusCode"=>"0","message"=> $sResult['errorMessage'],"navTabId"=>$this->navTab,
                    "rel"=>"","forwardUrl"=>"","callbackType"=>"");
                echo json_encode($ret); return;
            }
        }
    }

    /**
     * 清空画布；
     */
    
    function clear()
    {
        $this->redis->del($this->topo_hash);
    }
}